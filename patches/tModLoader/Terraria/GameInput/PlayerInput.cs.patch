--- src/Terraria/Terraria/GameInput/PlayerInput.cs
+++ src/tModLoader/Terraria/GameInput/PlayerInput.cs
@@ -1,14 +_,14 @@
-using Microsoft.Xna.Framework;
-using Microsoft.Xna.Framework.Input;
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using Microsoft.Xna.Framework;
+using Microsoft.Xna.Framework.Input;
 using Terraria.Audio;
 using Terraria.GameContent.UI;
 using Terraria.GameContent.UI.Chat;
-using Terraria.GameContent.UI.States;
 using Terraria.ID;
-using Terraria.Social;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Input;
 using Terraria.UI;
 using Terraria.UI.Gamepad;
 
@@ -23,9 +_,13 @@
 
 		public static Vector2 RawMouseScale = Vector2.One;
 		public static TriggersPack Triggers = new TriggersPack();
+
 		public static List<string> KnownTriggers = new List<string> {
 			"MouseLeft",
 			"MouseRight",
+			"MouseMiddle",
+			"MouseXButton1",
+			"MouseXButton2",
 			"Up",
 			"Down",
 			"Left",
@@ -77,12 +_,13 @@
 			"ViewZoomOut",
 			"ToggleCreativeMenu"
 		};
+
-		private static bool _canReleaseRebindingLock = true;
+		// private static bool _canReleaseRebindingLock = true;
-		private static int _memoOfLastPoint = -1;
+		// private static int _memoOfLastPoint = -1;
-		public static int NavigatorRebindingLock;
+		// public static int NavigatorRebindingLock;
-		public static string BlockedKey = "";
+		// public static string BlockedKey = "";
-		private static string _listeningTrigger;
+		// private static string _listeningTrigger;
-		private static InputMode _listeningInputMode;
+		// private static InputMode _listeningInputMode;
 		public static Dictionary<string, PlayerInputProfile> Profiles = new Dictionary<string, PlayerInputProfile>();
 		public static Dictionary<string, PlayerInputProfile> OriginalProfiles = new Dictionary<string, PlayerInputProfile>();
 		private static string _selectedProfile;
@@ -92,9 +_,11 @@
 		public static bool GrappleAndInteractAreShared;
 		public static SmartSelectGamepadPointer smartSelectPointer = new SmartSelectGamepadPointer();
 		private static string _invalidatorCheck = "";
+
 		private static bool _lastActivityState;
-		public static MouseState MouseInfo;
-		public static MouseState MouseInfoOld;
+
+		// public static MouseState MouseInfo;
+		// public static MouseState MouseInfoOld;
 		public static int MouseX;
 		public static int MouseY;
 		public static bool LockGamepadTileUseButton = false;
@@ -126,9 +_,9 @@
 		private static ZoomContext _currentWantedZoom;
 		private static int[] DpadSnapCooldown = new int[4];
 
-		public static string ListeningTrigger => _listeningTrigger;
+		// public static string ListeningTrigger => _listeningTrigger;
 
-		public static bool CurrentlyRebinding => _listeningTrigger != null;
+		// public static bool CurrentlyRebinding => _listeningTrigger != null;
 
 		public static bool InvisibleGamepadInMenus {
 			get {
@@ -193,10 +_,10 @@
 		public static event Action OnBindingChange;
 		public static event Action OnActionableInput;
 
-		public static void ListenFor(string triggerName, InputMode inputmode) {
-			_listeningTrigger = triggerName;
-			_listeningInputMode = inputmode;
-		}
+		// public static void ListenFor(string triggerName, InputMode inputmode) {
+		// _listeningTrigger = triggerName;
+		// _listeningInputMode = inputmode;
+		// }
 
 		private static bool InvalidateKeyboardSwap() {
 			if (_invalidatorCheck.Length == 0)
@@ -218,8 +_,8 @@
 		public static void ResetInputsOnActiveStateChange() {
 			bool isActive = Main.instance.IsActive;
 			if (_lastActivityState != isActive) {
-				MouseInfo = default(MouseState);
+				// MouseInfo = default(MouseState);
-				MouseInfoOld = default(MouseState);
+				// MouseInfoOld = default(MouseState);
 				Main.keyState = Keyboard.GetState();
 				Main.inputText = Keyboard.GetState();
 				Main.oldInputText = Keyboard.GetState();
@@ -316,9 +_,25 @@
 			}
 		}
 
+		// To allow mod hotkeys to load, need to reinitialize after load.
+		internal static bool reinitialize;
+
+		private static void ReInitialize() {
+			Profiles.Clear();
+			OriginalProfiles.Clear();
+			Initialize_Inner(); //Mirsario: To not repeat code in patches, reuse the one that was previously in Initialize().
+			Load(); // Loads the JSON into the Profiles above
+			reinitialize = false;
+		}
+
 		public static void Initialize() {
 			Main.InputProfiles.OnProcessText += PrettyPrintProfiles;
 			Player.Hooks.OnEnterWorld += Hook_OnEnterWorld;
+			Initialize_Inner();
+			Input.Load();
+		}
+
+		private static void Initialize_Inner() {
 			PlayerInputProfile playerInputProfile = new PlayerInputProfile("Redigit's Pick");
 			playerInputProfile.Initialize(PresetProfiles.Redigit);
 			Profiles.Add(playerInputProfile.Name, playerInputProfile);
@@ -366,7 +_,9 @@
 		}
 
 		public static void Load() {
-			Main.InputProfiles.Load();
+			if (!Main.InputProfiles.Load())
+				return; // fixes strange bug caused by deleting input profiles.json in game and reloading mods.
+
 			Dictionary<string, PlayerInputProfile> dictionary = new Dictionary<string, PlayerInputProfile>();
 			string currentValue = null;
 			Main.InputProfiles.Get("Selected Profile", ref currentValue);
@@ -397,145 +_,65 @@
 
 		public static void ManageVersion_1_3() {
 			PlayerInputProfile playerInputProfile = Profiles["Custom"];
-			string[,] array = new string[20, 2] {
-				{
-					"KeyUp",
-					"Up"
-				},
-				{
-					"KeyDown",
-					"Down"
-				},
-				{
-					"KeyLeft",
-					"Left"
-				},
-				{
-					"KeyRight",
-					"Right"
-				},
-				{
-					"KeyJump",
-					"Jump"
-				},
-				{
-					"KeyThrowItem",
-					"Throw"
-				},
-				{
-					"KeyInventory",
-					"Inventory"
-				},
-				{
-					"KeyQuickHeal",
-					"QuickHeal"
-				},
-				{
-					"KeyQuickMana",
-					"QuickMana"
-				},
-				{
-					"KeyQuickBuff",
-					"QuickBuff"
-				},
-				{
-					"KeyUseHook",
-					"Grapple"
-				},
-				{
-					"KeyAutoSelect",
-					"SmartSelect"
-				},
-				{
-					"KeySmartCursor",
-					"SmartCursor"
-				},
-				{
-					"KeyMount",
-					"QuickMount"
-				},
-				{
-					"KeyMapStyle",
-					"MapStyle"
-				},
-				{
-					"KeyFullscreenMap",
-					"MapFull"
-				},
-				{
-					"KeyMapZoomIn",
-					"MapZoomIn"
-				},
-				{
-					"KeyMapZoomOut",
-					"MapZoomOut"
-				},
-				{
-					"KeyMapAlphaUp",
-					"MapAlphaUp"
-				},
-				{
-					"KeyMapAlphaDown",
-					"MapAlphaDown"
-				}
-			};
+			string[,] array = new string[20, 2] { { "KeyUp", "Up" }, { "KeyDown", "Down" }, { "KeyLeft", "Left" }, { "KeyRight", "Right" }, { "KeyJump", "Jump" }, { "KeyThrowItem", "Throw" }, { "KeyInventory", "Inventory" }, { "KeyQuickHeal", "QuickHeal" }, { "KeyQuickMana", "QuickMana" }, { "KeyQuickBuff", "QuickBuff" }, { "KeyUseHook", "Grapple" }, { "KeyAutoSelect", "SmartSelect" }, { "KeySmartCursor", "SmartCursor" }, { "KeyMount", "QuickMount" }, { "KeyMapStyle", "MapStyle" }, { "KeyFullscreenMap", "MapFull" }, { "KeyMapZoomIn", "MapZoomIn" }, { "KeyMapZoomOut", "MapZoomOut" }, { "KeyMapAlphaUp", "MapAlphaUp" }, { "KeyMapAlphaDown", "MapAlphaDown" } };
 
 			for (int i = 0; i < array.GetLength(0); i++) {
 				string currentValue = null;
 				Main.Configuration.Get(array[i, 0], ref currentValue);
 				if (currentValue != null) {
-					playerInputProfile.InputModes[InputMode.Keyboard].KeyStatus[array[i, 1]] = new List<string> {
+					playerInputProfile.InputModes[InputMode.Keyboard].KeyStatus[array[i, 1]] = new List<string> { currentValue };
-						currentValue
-					};
 
-					playerInputProfile.InputModes[InputMode.KeyboardUI].KeyStatus[array[i, 1]] = new List<string> {
+					playerInputProfile.InputModes[InputMode.KeyboardUI].KeyStatus[array[i, 1]] = new List<string> { currentValue };
-						currentValue
-					};
 				}
 			}
 		}
 
-		public static void UpdateInput() {
-			Triggers.Reset();
-			ScrollWheelValueOld = ScrollWheelValue;
-			ScrollWheelValue = 0;
+		public static void UpdateInput(GameTime gameTime) {
+			if (reinitialize)
+				ReInitialize();
+
+			// Triggers.Reset();
+			// ScrollWheelValueOld = ScrollWheelValue;
+			// ScrollWheelValue = 0;
 			GamepadThumbstickLeft = Vector2.Zero;
 			GamepadThumbstickRight = Vector2.Zero;
-			GrappleAndInteractAreShared = (UsingGamepad && CurrentProfile.InputModes[InputMode.XBoxGamepad].DoGrappleAndInteractShareTheSameKey);
+			GrappleAndInteractAreShared = UsingGamepad && CurrentProfile.InputModes[InputMode.XBoxGamepad].DoGrappleAndInteractShareTheSameKey;
 			if (InBuildingMode && !UsingGamepad)
 				ExitBuildingMode();
 
-			if (_canReleaseRebindingLock && NavigatorRebindingLock > 0) {
-				NavigatorRebindingLock--;
-				Triggers.Current.UsedMovementKey = false;
-				if (NavigatorRebindingLock == 0 && _memoOfLastPoint != -1) {
-					UIManageControls.ForceMoveTo = _memoOfLastPoint;
-					_memoOfLastPoint = -1;
-				}
-			}
+			// if (_canReleaseRebindingLock && NavigatorRebindingLock > 0) {
+			// NavigatorRebindingLock--;
+			// Triggers.Current.UsedMovementKey = false;
+			// if (NavigatorRebindingLock == 0 && _memoOfLastPoint != -1) {
+			// UIManageControls.ForceMoveTo = _memoOfLastPoint;
+			// _memoOfLastPoint = -1;
+			// }
+			// }
 
-			_canReleaseRebindingLock = true;
+			// _canReleaseRebindingLock = true;
 			VerifyBuildingMode();
-			MouseInput();
-			int num = 0 | (KeyboardInput() ? 1 : 0) | (GamePadInput() ? 1 : 0);
-			Triggers.Update();
+			// MouseInput();
+
+			Input.Update(gameTime);
+
+			KeyConfiguration keyConfiguration = CurrentProfile.InputModes[InputMode.Keyboard];
+			for (int l = 0; l < MouseKeys.Count; l++) keyConfiguration.Processkey(Triggers.Current, MouseKeys[l]);
+
+			// int num = 0 /*| (KeyboardInput() ? 1 : 0)*/ | (GamePadInput() ? 1 : 0);
+			// Triggers.Update();
 			PostInput();
-			ScrollWheelDelta = ScrollWheelValue - ScrollWheelValueOld;
-			ScrollWheelDeltaForUI = ScrollWheelDelta;
+			// ScrollWheelDelta = ScrollWheelValue - ScrollWheelValueOld;
+			// ScrollWheelDeltaForUI = ScrollWheelDelta;
 			WritingText = false;
-			UpdateMainMouse();
-			Main.mouseLeft = Triggers.Current.MouseLeft;
-			Main.mouseRight = Triggers.Current.MouseRight;
+			// UpdateMainMouse();
+			// Main.mouseLeft = Triggers.Current.MouseLeft;
+			// Main.mouseRight = Triggers.Current.MouseRight;
+			// Main.mouseMiddle = Triggers.Current.MouseMiddle;
+			// Main.mouseXButton1 = Triggers.Current.MouseXButton1;
+			// Main.mouseXButton2 = Triggers.Current.MouseXButton2;
 			CacheZoomableValues();
-			if (num != 0 && PlayerInput.OnActionableInput != null)
-				PlayerInput.OnActionableInput();
-		}
-
-		public static void UpdateMainMouse() {
-			Main.lastMouseX = Main.mouseX;
-			Main.lastMouseY = Main.mouseY;
-			Main.mouseX = MouseX;
-			Main.mouseY = MouseY;
+			// if (num != 0 && PlayerInput.OnActionableInput != null)
+			// PlayerInput.OnActionableInput();
 		}
 
 		public static void CacheZoomableValues() {
@@ -545,8 +_,8 @@
 
 		public static void CacheMousePositionForZoom() {
 			float num = 1f;
-			_originalMouseX = (int)((float)Main.mouseX * num);
+			_originalMouseX = (int)(Main.mouseX * num);
-			_originalMouseY = (int)((float)Main.mouseY * num);
+			_originalMouseY = (int)(Main.mouseY * num);
 		}
 
 		private static void CacheOriginalInput() {
@@ -561,439 +_,325 @@
 			_originalScreenHeight = Main.screenHeight;
 		}
 
-		private static bool GamePadInput() {
-			bool flag = false;
-			ScrollWheelValue += GamepadScrollValue;
-			GamePadState gamePadState = default(GamePadState);
-			bool flag2 = false;
-			for (int i = 0; i < 4; i++) {
-				GamePadState state = GamePad.GetState((PlayerIndex)i);
-				if (state.IsConnected) {
-					flag2 = true;
-					gamePadState = state;
-					break;
-				}
-			}
-
-			if (Main.SettingBlockGamepadsEntirely)
-				return false;
-
-			if (!flag2)
-				return false;
-
-			if (!Main.instance.IsActive && !Main.AllowUnfocusedInputOnGamepad)
-				return false;
-
-			Player player = Main.player[Main.myPlayer];
-			bool flag3 = UILinkPointNavigator.Available && !InBuildingMode;
-			InputMode inputMode = InputMode.XBoxGamepad;
-			if (Main.gameMenu || flag3 || player.talkNPC != -1 || player.sign != -1 || IngameFancyUI.CanCover())
-				inputMode = InputMode.XBoxGamepadUI;
-
-			if (!Main.gameMenu && InBuildingMode)
-				inputMode = InputMode.XBoxGamepad;
-
-			if (CurrentInputMode == InputMode.XBoxGamepad && inputMode == InputMode.XBoxGamepadUI)
-				flag = true;
-
-			if (CurrentInputMode == InputMode.XBoxGamepadUI && inputMode == InputMode.XBoxGamepad)
-				flag = true;
-
-			if (flag)
-				CurrentInputMode = inputMode;
-
-			KeyConfiguration keyConfiguration = CurrentProfile.InputModes[inputMode];
-			int num = 2145386496;
-			for (int j = 0; j < ButtonsGamepad.Length; j++) {
-				if ((num & (int)ButtonsGamepad[j]) <= 0 && gamePadState.IsButtonDown(ButtonsGamepad[j])) {
-					if (CheckRebindingProcessGamepad(ButtonsGamepad[j].ToString()))
-						return false;
-
-					keyConfiguration.Processkey(Triggers.Current, ButtonsGamepad[j].ToString());
-					flag = true;
-				}
-			}
-
-			GamepadThumbstickLeft = gamePadState.ThumbSticks.Left * new Vector2(1f, -1f) * new Vector2(CurrentProfile.LeftThumbstickInvertX.ToDirectionInt() * -1, CurrentProfile.LeftThumbstickInvertY.ToDirectionInt() * -1);
-			GamepadThumbstickRight = gamePadState.ThumbSticks.Right * new Vector2(1f, -1f) * new Vector2(CurrentProfile.RightThumbstickInvertX.ToDirectionInt() * -1, CurrentProfile.RightThumbstickInvertY.ToDirectionInt() * -1);
-			Vector2 gamepadThumbstickRight = GamepadThumbstickRight;
-			Vector2 gamepadThumbstickLeft = GamepadThumbstickLeft;
-			Vector2 vector = gamepadThumbstickRight;
-			if (vector != Vector2.Zero)
-				vector.Normalize();
-
-			Vector2 vector2 = gamepadThumbstickLeft;
-			if (vector2 != Vector2.Zero)
-				vector2.Normalize();
-
-			float num2 = 0.6f;
-			float triggersDeadzone = CurrentProfile.TriggersDeadzone;
-			if (inputMode == InputMode.XBoxGamepadUI) {
-				num2 = 0.4f;
-				if (GamepadAllowScrolling)
-					GamepadScrollValue -= (int)(gamepadThumbstickRight.Y * 16f);
-
-				GamepadAllowScrolling = false;
-			}
-
-			if (Vector2.Dot(-Vector2.UnitX, vector2) >= num2 && gamepadThumbstickLeft.X < 0f - CurrentProfile.LeftThumbstickDeadzoneX) {
-				if (CheckRebindingProcessGamepad(Buttons.LeftThumbstickLeft.ToString()))
-					return false;
-
-				keyConfiguration.Processkey(Triggers.Current, Buttons.LeftThumbstickLeft.ToString());
-				flag = true;
-			}
-
-			if (Vector2.Dot(Vector2.UnitX, vector2) >= num2 && gamepadThumbstickLeft.X > CurrentProfile.LeftThumbstickDeadzoneX) {
-				if (CheckRebindingProcessGamepad(Buttons.LeftThumbstickRight.ToString()))
-					return false;
-
-				keyConfiguration.Processkey(Triggers.Current, Buttons.LeftThumbstickRight.ToString());
-				flag = true;
-			}
-
-			if (Vector2.Dot(-Vector2.UnitY, vector2) >= num2 && gamepadThumbstickLeft.Y < 0f - CurrentProfile.LeftThumbstickDeadzoneY) {
-				if (CheckRebindingProcessGamepad(Buttons.LeftThumbstickUp.ToString()))
-					return false;
-
-				keyConfiguration.Processkey(Triggers.Current, Buttons.LeftThumbstickUp.ToString());
-				flag = true;
-			}
-
-			if (Vector2.Dot(Vector2.UnitY, vector2) >= num2 && gamepadThumbstickLeft.Y > CurrentProfile.LeftThumbstickDeadzoneY) {
-				if (CheckRebindingProcessGamepad(Buttons.LeftThumbstickDown.ToString()))
-					return false;
-
-				keyConfiguration.Processkey(Triggers.Current, Buttons.LeftThumbstickDown.ToString());
-				flag = true;
-			}
-
-			if (Vector2.Dot(-Vector2.UnitX, vector) >= num2 && gamepadThumbstickRight.X < 0f - CurrentProfile.RightThumbstickDeadzoneX) {
-				if (CheckRebindingProcessGamepad(Buttons.RightThumbstickLeft.ToString()))
-					return false;
-
-				keyConfiguration.Processkey(Triggers.Current, Buttons.RightThumbstickLeft.ToString());
-				flag = true;
-			}
-
-			if (Vector2.Dot(Vector2.UnitX, vector) >= num2 && gamepadThumbstickRight.X > CurrentProfile.RightThumbstickDeadzoneX) {
-				if (CheckRebindingProcessGamepad(Buttons.RightThumbstickRight.ToString()))
-					return false;
-
-				keyConfiguration.Processkey(Triggers.Current, Buttons.RightThumbstickRight.ToString());
-				flag = true;
-			}
-
-			if (Vector2.Dot(-Vector2.UnitY, vector) >= num2 && gamepadThumbstickRight.Y < 0f - CurrentProfile.RightThumbstickDeadzoneY) {
-				if (CheckRebindingProcessGamepad(Buttons.RightThumbstickUp.ToString()))
-					return false;
-
-				keyConfiguration.Processkey(Triggers.Current, Buttons.RightThumbstickUp.ToString());
-				flag = true;
-			}
-
-			if (Vector2.Dot(Vector2.UnitY, vector) >= num2 && gamepadThumbstickRight.Y > CurrentProfile.RightThumbstickDeadzoneY) {
-				if (CheckRebindingProcessGamepad(Buttons.RightThumbstickDown.ToString()))
-					return false;
-
-				keyConfiguration.Processkey(Triggers.Current, Buttons.RightThumbstickDown.ToString());
-				flag = true;
-			}
-
-			if (gamePadState.Triggers.Left > triggersDeadzone) {
-				if (CheckRebindingProcessGamepad(Buttons.LeftTrigger.ToString()))
-					return false;
-
-				keyConfiguration.Processkey(Triggers.Current, Buttons.LeftTrigger.ToString());
-				flag = true;
-			}
-
-			if (gamePadState.Triggers.Right > triggersDeadzone) {
-				if (CheckRebindingProcessGamepad(Buttons.RightTrigger.ToString()))
-					return false;
-
-				keyConfiguration.Processkey(Triggers.Current, Buttons.RightTrigger.ToString());
-				flag = true;
-			}
-
-			bool flag4 = ItemID.Sets.GamepadWholeScreenUseRange[player.inventory[player.selectedItem].type] || player.scope;
-			int num3 = player.inventory[player.selectedItem].tileBoost + ItemID.Sets.GamepadExtraRange[player.inventory[player.selectedItem].type];
-			if (player.yoyoString && ItemID.Sets.Yoyo[player.inventory[player.selectedItem].type])
-				num3 += 5;
-			else if (player.inventory[player.selectedItem].createTile < 0 && player.inventory[player.selectedItem].createWall <= 0 && player.inventory[player.selectedItem].shoot > 0)
-				num3 += 10;
-			else if (player.controlTorch)
-				num3++;
-
-			if (flag4)
-				num3 += 30;
-
-			if (player.mount.Active && player.mount.Type == 8)
-				num3 = 10;
-
-			bool flag5 = false;
-			bool flag6 = !Main.gameMenu && !flag3 && Main.SmartCursorEnabled;
-			if (!CursorIsBusy) {
-				bool flag7 = Main.mapFullscreen || (!Main.gameMenu && !flag3);
-				int num4 = Main.screenWidth / 2;
-				int num5 = Main.screenHeight / 2;
-				if (!Main.mapFullscreen && flag7 && !flag4) {
-					Point point = Main.ReverseGravitySupport(player.Center - Main.screenPosition).ToPoint();
-					num4 = point.X;
-					num5 = point.Y;
-				}
-
-				if (player.velocity == Vector2.Zero && gamepadThumbstickLeft == Vector2.Zero && gamepadThumbstickRight == Vector2.Zero && flag6)
-					num4 += player.direction * 10;
-
-				float m = Main.GameViewMatrix.ZoomMatrix.M11;
-				smartSelectPointer.UpdateSize(new Vector2(Player.tileRangeX * 16 + num3 * 16, Player.tileRangeY * 16 + num3 * 16) * m);
-				if (flag4)
-					smartSelectPointer.UpdateSize(new Vector2(Math.Max(Main.screenWidth, Main.screenHeight) / 2));
-
-				smartSelectPointer.UpdateCenter(new Vector2(num4, num5));
-				if (gamepadThumbstickRight != Vector2.Zero && flag7) {
-					Vector2 value = new Vector2(8f);
-					if (!Main.gameMenu && Main.mapFullscreen)
-						value = new Vector2(16f);
-
-					if (flag6) {
-						value = new Vector2(Player.tileRangeX * 16, Player.tileRangeY * 16);
-						if (num3 != 0)
-							value += new Vector2(num3 * 16, num3 * 16);
-
-						if (flag4)
-							value = new Vector2(Math.Max(Main.screenWidth, Main.screenHeight) / 2);
-					}
-					else if (!Main.mapFullscreen) {
-						if (player.inventory[player.selectedItem].mech)
-							value += Vector2.Zero;
-						else
-							value += new Vector2(num3) / 4f;
-					}
-
-					float m2 = Main.GameViewMatrix.ZoomMatrix.M11;
-					Vector2 vector3 = gamepadThumbstickRight * value * m2;
-					int num6 = MouseX - num4;
-					int num7 = MouseY - num5;
-					if (flag6) {
-						num6 = 0;
-						num7 = 0;
-					}
-
-					num6 += (int)vector3.X;
-					num7 += (int)vector3.Y;
-					MouseX = num6 + num4;
-					MouseY = num7 + num5;
-					flag = true;
-					flag5 = true;
-				}
-
-				if (gamepadThumbstickLeft != Vector2.Zero && flag7) {
-					float scaleFactor = 8f;
-					if (!Main.gameMenu && Main.mapFullscreen)
-						scaleFactor = 3f;
-
-					if (Main.mapFullscreen) {
-						Vector2 value2 = gamepadThumbstickLeft * scaleFactor;
-						Main.mapFullscreenPos += value2 * scaleFactor * (1f / Main.mapFullscreenScale);
-						flag = true;
-					}
-					else if (!flag5 && Main.SmartCursorEnabled) {
-						float m3 = Main.GameViewMatrix.ZoomMatrix.M11;
-						Vector2 vector4 = gamepadThumbstickLeft * new Vector2(Player.tileRangeX * 16, Player.tileRangeY * 16) * m3;
-						if (num3 != 0)
-							vector4 = gamepadThumbstickLeft * new Vector2((Player.tileRangeX + num3) * 16, (Player.tileRangeY + num3) * 16) * m3;
-
-						if (flag4)
-							vector4 = new Vector2(Math.Max(Main.screenWidth, Main.screenHeight) / 2) * gamepadThumbstickLeft;
-
-						int num8 = (int)vector4.X;
-						int num9 = (int)vector4.Y;
-						MouseX = num8 + num4;
-						MouseY = num9 + num5;
-						flag5 = true;
-					}
-
-					flag = true;
-				}
-
-				if (CurrentInputMode == InputMode.XBoxGamepad) {
-					HandleDpadSnap();
-					int num10 = MouseX - num4;
-					int num11 = MouseY - num5;
-					if (!Main.gameMenu && !flag3) {
-						if (flag4 && !Main.mapFullscreen) {
-							float num12 = 1f;
-							int num13 = Main.screenWidth / 2;
-							int num14 = Main.screenHeight / 2;
-							num10 = (int)Utils.Clamp(num10, (float)(-num13) * num12, (float)num13 * num12);
-							num11 = (int)Utils.Clamp(num11, (float)(-num14) * num12, (float)num14 * num12);
-						}
-						else {
-							float num15 = 0f;
-							if (player.HeldItem.createTile >= 0 || player.HeldItem.createWall > 0 || player.HeldItem.tileWand >= 0)
-								num15 = 0.5f;
-
-							float m4 = Main.GameViewMatrix.ZoomMatrix.M11;
-							float num16 = (0f - ((float)(Player.tileRangeY + num3) - num15)) * 16f * m4;
-							float max = ((float)(Player.tileRangeY + num3) - num15) * 16f * m4;
-							num16 -= (float)(player.height / 16 / 2 * 16);
-							num10 = (int)Utils.Clamp(num10, (0f - ((float)(Player.tileRangeX + num3) - num15)) * 16f * m4, ((float)(Player.tileRangeX + num3) - num15) * 16f * m4);
-							num11 = (int)Utils.Clamp(num11, num16, max);
-						}
-
-						if (flag6 && (!flag || flag4)) {
-							float num17 = 0.81f;
-							if (flag4)
-								num17 = 0.95f;
-
-							num10 = (int)((float)num10 * num17);
-							num11 = (int)((float)num11 * num17);
-						}
-					}
-					else {
-						num10 = Utils.Clamp(num10, -num4 + 10, num4 - 10);
-						num11 = Utils.Clamp(num11, -num5 + 10, num5 - 10);
-					}
-
-					MouseX = num10 + num4;
-					MouseY = num11 + num5;
-				}
-			}
-
-			if (flag)
-				CurrentInputMode = inputMode;
-
-			if (CurrentInputMode == InputMode.XBoxGamepad)
-				Main.SetCameraGamepadLerp(0.1f);
-
-			return flag;
-		}
-
-		private static void MouseInput() {
-			bool flag = false;
-			MouseInfoOld = MouseInfo;
-			MouseInfo = Mouse.GetState();
-			ScrollWheelValue += MouseInfo.ScrollWheelValue;
-			if (MouseInfo.X != MouseInfoOld.X || MouseInfo.Y != MouseInfoOld.Y || MouseInfo.ScrollWheelValue != MouseInfoOld.ScrollWheelValue) {
-				MouseX = (int)((float)MouseInfo.X * RawMouseScale.X);
-				MouseY = (int)((float)MouseInfo.Y * RawMouseScale.Y);
-				flag = true;
-			}
-
-			MouseKeys.Clear();
-			if (Main.instance.IsActive) {
-				if (MouseInfo.LeftButton == ButtonState.Pressed) {
-					MouseKeys.Add("Mouse1");
-					flag = true;
-				}
-
-				if (MouseInfo.RightButton == ButtonState.Pressed) {
-					MouseKeys.Add("Mouse2");
-					flag = true;
-				}
-
-				if (MouseInfo.MiddleButton == ButtonState.Pressed) {
-					MouseKeys.Add("Mouse3");
-					flag = true;
-				}
-
-				if (MouseInfo.XButton1 == ButtonState.Pressed) {
-					MouseKeys.Add("Mouse4");
-					flag = true;
-				}
-
-				if (MouseInfo.XButton2 == ButtonState.Pressed) {
-					MouseKeys.Add("Mouse5");
-					flag = true;
-				}
-			}
-
-			if (flag) {
-				CurrentInputMode = InputMode.Mouse;
-				Triggers.Current.UsedMovementKey = false;
-			}
-		}
-
-		private static bool KeyboardInput() {
-			bool flag = false;
-			bool flag2 = false;
-			List<Keys> pressedKeys = GetPressedKeys();
-			DebugKeys(pressedKeys);
-			if (pressedKeys.Count == 0 && MouseKeys.Count == 0)
-				return false;
-
-			for (int i = 0; i < pressedKeys.Count; i++) {
-				if (pressedKeys[i] == Keys.LeftShift || pressedKeys[i] == Keys.RightShift)
-					flag = true;
-				else if (pressedKeys[i] == Keys.LeftAlt || pressedKeys[i] == Keys.RightAlt)
-					flag2 = true;
-
-				Main.ChromaPainter.PressKey(pressedKeys[i]);
-			}
-
-			if (Main.blockKey != Keys.None.ToString()) {
-				bool flag3 = false;
-				for (int j = 0; j < pressedKeys.Count; j++) {
-					if (pressedKeys[j].ToString() == Main.blockKey) {
-						pressedKeys[j] = Keys.None;
-						flag3 = true;
-					}
-				}
-
-				if (!flag3)
-					Main.blockKey = Keys.None.ToString();
-			}
-
-			KeyConfiguration keyConfiguration = CurrentProfile.InputModes[InputMode.Keyboard];
-			if (Main.gameMenu && !WritingText)
-				keyConfiguration = CurrentProfile.InputModes[InputMode.KeyboardUI];
-
-			List<string> list = new List<string>(pressedKeys.Count);
-			for (int k = 0; k < pressedKeys.Count; k++) {
-				list.Add(pressedKeys[k].ToString());
-			}
-
-			if (WritingText)
-				list.Clear();
-
-			int count = list.Count;
-			list.AddRange(MouseKeys);
-			bool flag4 = false;
-			for (int l = 0; l < list.Count; l++) {
-				if (l < count && pressedKeys[l] == Keys.None)
-					continue;
-
-				string newKey = list[l];
-				if (!(list[l] == Keys.Tab.ToString()) || !((flag && SocialAPI.Mode == SocialMode.Steam) || flag2)) {
-					if (CheckRebindingProcessKeyboard(newKey))
-						return false;
-
-					_ = Main.oldKeyState;
-					if (l >= count || !Main.oldKeyState.IsKeyDown(pressedKeys[l]))
-						keyConfiguration.Processkey(Triggers.Current, newKey);
-					else
-						keyConfiguration.CopyKeyState(Triggers.Old, Triggers.Current, newKey);
-
-					if (l >= count || pressedKeys[l] != 0)
-						flag4 = true;
-				}
-			}
-
-			if (flag4)
-				CurrentInputMode = InputMode.Keyboard;
-
-			return flag4;
-		}
-
-		private static void DebugKeys(List<Keys> keys) {
-		}
+		// private static bool GamePadInput() {
+		// 	bool flag = false;
+		// 	ScrollWheelValue += GamepadScrollValue;
+		// 	GamePadState gamePadState = default(GamePadState);
+		// 	bool flag2 = false;
+		// 	for (int i = 0; i < 4; i++) {
+		// 		GamePadState state = GamePad.GetState((PlayerIndex)i);
+		// 		if (state.IsConnected) {
+		// 			flag2 = true;
+		// 			gamePadState = state;
+		// 			break;
+		// 		}
+		// 	}
+		//
+		// 	if (Main.SettingBlockGamepadsEntirely)
+		// 		return false;
+		//
+		// 	if (!flag2)
+		// 		return false;
+		//
+		// 	if (!Main.instance.IsActive && !Main.AllowUnfocusedInputOnGamepad)
+		// 		return false;
+		//
+		// 	Player player = Main.player[Main.myPlayer];
+		// 	bool flag3 = UILinkPointNavigator.Available && !InBuildingMode;
+		// 	InputMode inputMode = InputMode.XBoxGamepad;
+		// 	if (Main.gameMenu || flag3 || player.talkNPC != -1 || player.sign != -1 || IngameFancyUI.CanCover())
+		// 		inputMode = InputMode.XBoxGamepadUI;
+		//
+		// 	if (!Main.gameMenu && InBuildingMode)
+		// 		inputMode = InputMode.XBoxGamepad;
+		//
+		// 	if (CurrentInputMode == InputMode.XBoxGamepad && inputMode == InputMode.XBoxGamepadUI)
+		// 		flag = true;
+		//
+		// 	if (CurrentInputMode == InputMode.XBoxGamepadUI && inputMode == InputMode.XBoxGamepad)
+		// 		flag = true;
+		//
+		// 	if (flag)
+		// 		CurrentInputMode = inputMode;
+		//
+		// 	KeyConfiguration keyConfiguration = CurrentProfile.InputModes[inputMode];
+		// 	int num = 2145386496;
+		// 	for (int j = 0; j < ButtonsGamepad.Length; j++) {
+		// 		if ((num & (int)ButtonsGamepad[j]) <= 0 && gamePadState.IsButtonDown(ButtonsGamepad[j])) {
+		// 			// if (CheckRebindingProcessGamepad(ButtonsGamepad[j].ToString()))
+		// 				// return false;
+		//
+		// 			keyConfiguration.Processkey(Triggers.Current, ButtonsGamepad[j].ToString());
+		// 			flag = true;
+		// 		}
+		// 	}
+		//
+		// 	GamepadThumbstickLeft = gamePadState.ThumbSticks.Left * new Vector2(1f, -1f) * new Vector2(CurrentProfile.LeftThumbstickInvertX.ToDirectionInt() * -1, CurrentProfile.LeftThumbstickInvertY.ToDirectionInt() * -1);
+		// 	GamepadThumbstickRight = gamePadState.ThumbSticks.Right * new Vector2(1f, -1f) * new Vector2(CurrentProfile.RightThumbstickInvertX.ToDirectionInt() * -1, CurrentProfile.RightThumbstickInvertY.ToDirectionInt() * -1);
+		// 	Vector2 gamepadThumbstickRight = GamepadThumbstickRight;
+		// 	Vector2 gamepadThumbstickLeft = GamepadThumbstickLeft;
+		// 	Vector2 vector = gamepadThumbstickRight;
+		// 	if (vector != Vector2.Zero)
+		// 		vector.Normalize();
+		//
+		// 	Vector2 vector2 = gamepadThumbstickLeft;
+		// 	if (vector2 != Vector2.Zero)
+		// 		vector2.Normalize();
+		//
+		// 	float num2 = 0.6f;
+		// 	float triggersDeadzone = CurrentProfile.TriggersDeadzone;
+		// 	if (inputMode == InputMode.XBoxGamepadUI) {
+		// 		num2 = 0.4f;
+		// 		if (GamepadAllowScrolling)
+		// 			GamepadScrollValue -= (int)(gamepadThumbstickRight.Y * 16f);
+		//
+		// 		GamepadAllowScrolling = false;
+		// 	}
+		//
+		// 	if (Vector2.Dot(-Vector2.UnitX, vector2) >= num2 && gamepadThumbstickLeft.X < 0f - CurrentProfile.LeftThumbstickDeadzoneX) {
+		// 		// if (CheckRebindingProcessGamepad(Buttons.LeftThumbstickLeft.ToString()))
+		// 			// return false;
+		//
+		// 		keyConfiguration.Processkey(Triggers.Current, Buttons.LeftThumbstickLeft.ToString());
+		// 		flag = true;
+		// 	}
+		//
+		// 	if (Vector2.Dot(Vector2.UnitX, vector2) >= num2 && gamepadThumbstickLeft.X > CurrentProfile.LeftThumbstickDeadzoneX) {
+		// 		// if (CheckRebindingProcessGamepad(Buttons.LeftThumbstickRight.ToString()))
+		// 			// return false;
+		//
+		// 		keyConfiguration.Processkey(Triggers.Current, Buttons.LeftThumbstickRight.ToString());
+		// 		flag = true;
+		// 	}
+		//
+		// 	if (Vector2.Dot(-Vector2.UnitY, vector2) >= num2 && gamepadThumbstickLeft.Y < 0f - CurrentProfile.LeftThumbstickDeadzoneY) {
+		// 		// if (CheckRebindingProcessGamepad(Buttons.LeftThumbstickUp.ToString()))
+		// 			// return false;
+		//
+		// 		keyConfiguration.Processkey(Triggers.Current, Buttons.LeftThumbstickUp.ToString());
+		// 		flag = true;
+		// 	}
+		//
+		// 	if (Vector2.Dot(Vector2.UnitY, vector2) >= num2 && gamepadThumbstickLeft.Y > CurrentProfile.LeftThumbstickDeadzoneY) {
+		// 		// if (CheckRebindingProcessGamepad(Buttons.LeftThumbstickDown.ToString()))
+		// 			// return false;
+		//
+		// 		keyConfiguration.Processkey(Triggers.Current, Buttons.LeftThumbstickDown.ToString());
+		// 		flag = true;
+		// 	}
+		//
+		// 	if (Vector2.Dot(-Vector2.UnitX, vector) >= num2 && gamepadThumbstickRight.X < 0f - CurrentProfile.RightThumbstickDeadzoneX) {
+		// 		// if (CheckRebindingProcessGamepad(Buttons.RightThumbstickLeft.ToString()))
+		// 			// return false;
+		//
+		// 		keyConfiguration.Processkey(Triggers.Current, Buttons.RightThumbstickLeft.ToString());
+		// 		flag = true;
+		// 	}
+		//
+		// 	if (Vector2.Dot(Vector2.UnitX, vector) >= num2 && gamepadThumbstickRight.X > CurrentProfile.RightThumbstickDeadzoneX) {
+		// 		// if (CheckRebindingProcessGamepad(Buttons.RightThumbstickRight.ToString()))
+		// 			// return false;
+		//
+		// 		keyConfiguration.Processkey(Triggers.Current, Buttons.RightThumbstickRight.ToString());
+		// 		flag = true;
+		// 	}
+		//
+		// 	if (Vector2.Dot(-Vector2.UnitY, vector) >= num2 && gamepadThumbstickRight.Y < 0f - CurrentProfile.RightThumbstickDeadzoneY) {
+		// 		// if (CheckRebindingProcessGamepad(Buttons.RightThumbstickUp.ToString()))
+		// 			// return false;
+		//
+		// 		keyConfiguration.Processkey(Triggers.Current, Buttons.RightThumbstickUp.ToString());
+		// 		flag = true;
+		// 	}
+		//
+		// 	if (Vector2.Dot(Vector2.UnitY, vector) >= num2 && gamepadThumbstickRight.Y > CurrentProfile.RightThumbstickDeadzoneY) {
+		// 		// if (CheckRebindingProcessGamepad(Buttons.RightThumbstickDown.ToString()))
+		// 			// return false;
+		//
+		// 		keyConfiguration.Processkey(Triggers.Current, Buttons.RightThumbstickDown.ToString());
+		// 		flag = true;
+		// 	}
+		//
+		// 	if (gamePadState.Triggers.Left > triggersDeadzone) {
+		// 		// if (CheckRebindingProcessGamepad(Buttons.LeftTrigger.ToString()))
+		// 			// return false;
+		//
+		// 		keyConfiguration.Processkey(Triggers.Current, Buttons.LeftTrigger.ToString());
+		// 		flag = true;
+		// 	}
+		//
+		// 	if (gamePadState.Triggers.Right > triggersDeadzone) {
+		// 		// if (CheckRebindingProcessGamepad(Buttons.RightTrigger.ToString()))
+		// 			// return false;
+		//
+		// 		keyConfiguration.Processkey(Triggers.Current, Buttons.RightTrigger.ToString());
+		// 		flag = true;
+		// 	}
+		//
+		// 	// TODO: We might just need a bool for while reloading.
+		// 	if (player.HeldItem.type >= ItemID.Sets.GamepadWholeScreenUseRange.Length) return false;
+		// 	bool flag4 = ItemID.Sets.GamepadWholeScreenUseRange[player.inventory[player.selectedItem].type] || player.scope;
+		// 	int num3 = player.inventory[player.selectedItem].tileBoost + ItemID.Sets.GamepadExtraRange[player.inventory[player.selectedItem].type];
+		// 	if (player.yoyoString && ItemID.Sets.Yoyo[player.inventory[player.selectedItem].type])
+		// 		num3 += 5;
+		// 	else if (player.inventory[player.selectedItem].createTile < 0 && player.inventory[player.selectedItem].createWall <= 0 && player.inventory[player.selectedItem].shoot > 0)
+		// 		num3 += 10;
+		// 	else if (player.controlTorch)
+		// 		num3++;
+		//
+		// 	if (flag4)
+		// 		num3 += 30;
+		//
+		// 	if (player.mount.Active && player.mount.Type == 8)
+		// 		num3 = 10;
+		//
+		// 	bool flag5 = false;
+		// 	bool flag6 = !Main.gameMenu && !flag3 && Main.SmartCursorEnabled;
+		// 	if (!CursorIsBusy) {
+		// 		bool flag7 = Main.mapFullscreen || (!Main.gameMenu && !flag3);
+		// 		int num4 = Main.screenWidth / 2;
+		// 		int num5 = Main.screenHeight / 2;
+		// 		if (!Main.mapFullscreen && flag7 && !flag4) {
+		// 			Point point = Main.ReverseGravitySupport(player.Center - Main.screenPosition).ToPoint();
+		// 			num4 = point.X;
+		// 			num5 = point.Y;
+		// 		}
+		//
+		// 		if (player.velocity == Vector2.Zero && gamepadThumbstickLeft == Vector2.Zero && gamepadThumbstickRight == Vector2.Zero && flag6)
+		// 			num4 += player.direction * 10;
+		//
+		// 		float m = Main.GameViewMatrix.ZoomMatrix.M11;
+		// 		smartSelectPointer.UpdateSize(new Vector2(Player.tileRangeX * 16 + num3 * 16, Player.tileRangeY * 16 + num3 * 16) * m);
+		// 		if (flag4)
+		// 			smartSelectPointer.UpdateSize(new Vector2(Math.Max(Main.screenWidth, Main.screenHeight) / 2));
+		//
+		// 		smartSelectPointer.UpdateCenter(new Vector2(num4, num5));
+		// 		if (gamepadThumbstickRight != Vector2.Zero && flag7) {
+		// 			Vector2 value = new Vector2(8f);
+		// 			if (!Main.gameMenu && Main.mapFullscreen)
+		// 				value = new Vector2(16f);
+		//
+		// 			if (flag6) {
+		// 				value = new Vector2(Player.tileRangeX * 16, Player.tileRangeY * 16);
+		// 				if (num3 != 0)
+		// 					value += new Vector2(num3 * 16, num3 * 16);
+		//
+		// 				if (flag4)
+		// 					value = new Vector2(Math.Max(Main.screenWidth, Main.screenHeight) / 2);
+		// 			}
+		// 			else if (!Main.mapFullscreen) {
+		// 				if (player.inventory[player.selectedItem].mech)
+		// 					value += Vector2.Zero;
+		// 				else
+		// 					value += new Vector2(num3) / 4f;
+		// 			}
+		//
+		// 			float m2 = Main.GameViewMatrix.ZoomMatrix.M11;
+		// 			Vector2 vector3 = gamepadThumbstickRight * value * m2;
+		// 			int num6 = MouseX - num4;
+		// 			int num7 = MouseY - num5;
+		// 			if (flag6) {
+		// 				num6 = 0;
+		// 				num7 = 0;
+		// 			}
+		//
+		// 			num6 += (int)vector3.X;
+		// 			num7 += (int)vector3.Y;
+		// 			MouseX = num6 + num4;
+		// 			MouseY = num7 + num5;
+		// 			flag = true;
+		// 			flag5 = true;
+		// 		}
+		//
+		// 		if (gamepadThumbstickLeft != Vector2.Zero && flag7) {
+		// 			float scaleFactor = 8f;
+		// 			if (!Main.gameMenu && Main.mapFullscreen)
+		// 				scaleFactor = 3f;
+		//
+		// 			if (Main.mapFullscreen) {
+		// 				Vector2 value2 = gamepadThumbstickLeft * scaleFactor;
+		// 				Main.mapFullscreenPos += value2 * scaleFactor * (1f / Main.mapFullscreenScale);
+		// 				flag = true;
+		// 			}
+		// 			else if (!flag5 && Main.SmartCursorEnabled) {
+		// 				float m3 = Main.GameViewMatrix.ZoomMatrix.M11;
+		// 				Vector2 vector4 = gamepadThumbstickLeft * new Vector2(Player.tileRangeX * 16, Player.tileRangeY * 16) * m3;
+		// 				if (num3 != 0)
+		// 					vector4 = gamepadThumbstickLeft * new Vector2((Player.tileRangeX + num3) * 16, (Player.tileRangeY + num3) * 16) * m3;
+		//
+		// 				if (flag4)
+		// 					vector4 = new Vector2(Math.Max(Main.screenWidth, Main.screenHeight) / 2) * gamepadThumbstickLeft;
+		//
+		// 				int num8 = (int)vector4.X;
+		// 				int num9 = (int)vector4.Y;
+		// 				MouseX = num8 + num4;
+		// 				MouseY = num9 + num5;
+		// 				flag5 = true;
+		// 			}
+		//
+		// 			flag = true;
+		// 		}
+		//
+		// 		if (CurrentInputMode == InputMode.XBoxGamepad) {
+		// 			HandleDpadSnap();
+		// 			int num10 = MouseX - num4;
+		// 			int num11 = MouseY - num5;
+		// 			if (!Main.gameMenu && !flag3) {
+		// 				if (flag4 && !Main.mapFullscreen) {
+		// 					float num12 = 1f;
+		// 					int num13 = Main.screenWidth / 2;
+		// 					int num14 = Main.screenHeight / 2;
+		// 					num10 = (int)Utils.Clamp(num10, (float)(-num13) * num12, (float)num13 * num12);
+		// 					num11 = (int)Utils.Clamp(num11, (float)(-num14) * num12, (float)num14 * num12);
+		// 				}
+		// 				else {
+		// 					float num15 = 0f;
+		// 					if (player.HeldItem.createTile >= 0 || player.HeldItem.createWall > 0 || player.HeldItem.tileWand >= 0)
+		// 						num15 = 0.5f;
+		//
+		// 					float m4 = Main.GameViewMatrix.ZoomMatrix.M11;
+		// 					float num16 = (0f - ((float)(Player.tileRangeY + num3) - num15)) * 16f * m4;
+		// 					float max = ((float)(Player.tileRangeY + num3) - num15) * 16f * m4;
+		// 					num16 -= (float)(player.height / 16 / 2 * 16);
+		// 					num10 = (int)Utils.Clamp(num10, (0f - ((float)(Player.tileRangeX + num3) - num15)) * 16f * m4, ((float)(Player.tileRangeX + num3) - num15) * 16f * m4);
+		// 					num11 = (int)Utils.Clamp(num11, num16, max);
+		// 				}
+		//
+		// 				if (flag6 && (!flag || flag4)) {
+		// 					float num17 = 0.81f;
+		// 					if (flag4)
+		// 						num17 = 0.95f;
+		//
+		// 					num10 = (int)((float)num10 * num17);
+		// 					num11 = (int)((float)num11 * num17);
+		// 				}
+		// 			}
+		// 			else {
+		// 				num10 = Utils.Clamp(num10, -num4 + 10, num4 - 10);
+		// 				num11 = Utils.Clamp(num11, -num5 + 10, num5 - 10);
+		// 			}
+		//
+		// 			MouseX = num10 + num4;
+		// 			MouseY = num11 + num5;
+		// 		}
+		// 	}
+		//
+		// 	if (flag)
+		// 		CurrentInputMode = inputMode;
+		//
+		// 	if (CurrentInputMode == InputMode.XBoxGamepad)
+		// 		Main.SetCameraGamepadLerp(0.1f);
+		//
+		// 	return flag;
+		// }
 
 		private static void FixDerpedRebinds() {
 			List<string> list = new List<string> {
 				"MouseLeft",
 				"MouseRight",
+				"MouseMiddle",
+				"MouseXButton1",
+				"MouseXButton2",
 				"Inventory"
 			};
 
@@ -1031,96 +_,96 @@
 			CurrentProfile.InputModes[inputMode].KeyStatus[trigger].AddRange(OriginalProfiles[key].InputModes[inputMode].KeyStatus[trigger]);
 		}
 
-		private static bool CheckRebindingProcessGamepad(string newKey) {
-			_canReleaseRebindingLock = false;
-			if (CurrentlyRebinding && _listeningInputMode == InputMode.XBoxGamepad) {
-				NavigatorRebindingLock = 3;
-				_memoOfLastPoint = UILinkPointNavigator.CurrentPoint;
-				SoundEngine.PlaySound(12);
-				if (CurrentProfile.InputModes[InputMode.XBoxGamepad].KeyStatus[ListeningTrigger].Contains(newKey)) {
-					CurrentProfile.InputModes[InputMode.XBoxGamepad].KeyStatus[ListeningTrigger].Remove(newKey);
-				}
-				else {
-					CurrentProfile.InputModes[InputMode.XBoxGamepad].KeyStatus[ListeningTrigger] = new List<string> {
-						newKey
-					};
-				}
-
-				ListenFor(null, InputMode.XBoxGamepad);
-			}
-
-			if (CurrentlyRebinding && _listeningInputMode == InputMode.XBoxGamepadUI) {
-				NavigatorRebindingLock = 3;
-				_memoOfLastPoint = UILinkPointNavigator.CurrentPoint;
-				SoundEngine.PlaySound(12);
-				if (CurrentProfile.InputModes[InputMode.XBoxGamepadUI].KeyStatus[ListeningTrigger].Contains(newKey)) {
-					CurrentProfile.InputModes[InputMode.XBoxGamepadUI].KeyStatus[ListeningTrigger].Remove(newKey);
-				}
-				else {
-					CurrentProfile.InputModes[InputMode.XBoxGamepadUI].KeyStatus[ListeningTrigger] = new List<string> {
-						newKey
-					};
-				}
-
-				ListenFor(null, InputMode.XBoxGamepadUI);
-			}
-
-			FixDerpedRebinds();
-			if (PlayerInput.OnBindingChange != null)
-				PlayerInput.OnBindingChange();
-
-			return NavigatorRebindingLock > 0;
-		}
-
-		private static bool CheckRebindingProcessKeyboard(string newKey) {
-			_canReleaseRebindingLock = false;
-			if (CurrentlyRebinding && _listeningInputMode == InputMode.Keyboard) {
-				NavigatorRebindingLock = 3;
-				_memoOfLastPoint = UILinkPointNavigator.CurrentPoint;
-				SoundEngine.PlaySound(12);
-				if (CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus[ListeningTrigger].Contains(newKey)) {
-					CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus[ListeningTrigger].Remove(newKey);
-				}
-				else {
-					CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus[ListeningTrigger] = new List<string> {
-						newKey
-					};
-				}
-
-				ListenFor(null, InputMode.Keyboard);
-				Main.blockKey = newKey;
-				Main.blockInput = false;
-				Main.ChromaPainter.CollectBoundKeys();
-			}
-
-			if (CurrentlyRebinding && _listeningInputMode == InputMode.KeyboardUI) {
-				NavigatorRebindingLock = 3;
-				_memoOfLastPoint = UILinkPointNavigator.CurrentPoint;
-				SoundEngine.PlaySound(12);
-				if (CurrentProfile.InputModes[InputMode.KeyboardUI].KeyStatus[ListeningTrigger].Contains(newKey)) {
-					CurrentProfile.InputModes[InputMode.KeyboardUI].KeyStatus[ListeningTrigger].Remove(newKey);
-				}
-				else {
-					CurrentProfile.InputModes[InputMode.KeyboardUI].KeyStatus[ListeningTrigger] = new List<string> {
-						newKey
-					};
-				}
-
-				ListenFor(null, InputMode.KeyboardUI);
-				Main.blockKey = newKey;
-				Main.blockInput = false;
-				Main.ChromaPainter.CollectBoundKeys();
-			}
-
-			FixDerpedRebinds();
-			if (PlayerInput.OnBindingChange != null)
-				PlayerInput.OnBindingChange();
-
-			return NavigatorRebindingLock > 0;
-		}
+		// private static bool CheckRebindingProcessGamepad(string newKey) {
+		// 	_canReleaseRebindingLock = false;
+		// 	if (CurrentlyRebinding && _listeningInputMode == InputMode.XBoxGamepad) {
+		// 		NavigatorRebindingLock = 3;
+		// 		_memoOfLastPoint = UILinkPointNavigator.CurrentPoint;
+		// 		SoundEngine.PlaySound(12);
+		// 		if (CurrentProfile.InputModes[InputMode.XBoxGamepad].KeyStatus[ListeningTrigger].Contains(newKey)) {
+		// 			CurrentProfile.InputModes[InputMode.XBoxGamepad].KeyStatus[ListeningTrigger].Remove(newKey);
+		// 		}
+		// 		else {
+		// 			CurrentProfile.InputModes[InputMode.XBoxGamepad].KeyStatus[ListeningTrigger] = new List<string> {
+		// 				newKey
+		// 			};
+		// 		}
+		//
+		// 		ListenFor(null, InputMode.XBoxGamepad);
+		// 	}
+		//
+		// 	if (CurrentlyRebinding && _listeningInputMode == InputMode.XBoxGamepadUI) {
+		// 		NavigatorRebindingLock = 3;
+		// 		_memoOfLastPoint = UILinkPointNavigator.CurrentPoint;
+		// 		SoundEngine.PlaySound(12);
+		// 		if (CurrentProfile.InputModes[InputMode.XBoxGamepadUI].KeyStatus[ListeningTrigger].Contains(newKey)) {
+		// 			CurrentProfile.InputModes[InputMode.XBoxGamepadUI].KeyStatus[ListeningTrigger].Remove(newKey);
+		// 		}
+		// 		else {
+		// 			CurrentProfile.InputModes[InputMode.XBoxGamepadUI].KeyStatus[ListeningTrigger] = new List<string> {
+		// 				newKey
+		// 			};
+		// 		}
+		//
+		// 		ListenFor(null, InputMode.XBoxGamepadUI);
+		// 	}
+		//
+		// 	FixDerpedRebinds();
+		// 	if (PlayerInput.OnBindingChange != null)
+		// 		PlayerInput.OnBindingChange();
+		//
+		// 	return NavigatorRebindingLock > 0;
+		// }
+		//
+		// private static bool CheckRebindingProcessKeyboard(string newKey) {
+		// 	_canReleaseRebindingLock = false;
+		// 	if (CurrentlyRebinding && _listeningInputMode == InputMode.Keyboard) {
+		// 		NavigatorRebindingLock = 3;
+		// 		_memoOfLastPoint = UILinkPointNavigator.CurrentPoint;
+		// 		SoundEngine.PlaySound(12);
+		// 		if (CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus[ListeningTrigger].Contains(newKey)) {
+		// 			CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus[ListeningTrigger].Remove(newKey);
+		// 		}
+		// 		else {
+		// 			CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus[ListeningTrigger] = new List<string> {
+		// 				newKey
+		// 			};
+		// 		}
+		//
+		// 		ListenFor(null, InputMode.Keyboard);
+		// 		Main.blockKey = newKey;
+		// 		Main.blockInput = false;
+		// 		Main.ChromaPainter.CollectBoundKeys();
+		// 	}
+		//
+		// 	if (CurrentlyRebinding && _listeningInputMode == InputMode.KeyboardUI) {
+		// 		NavigatorRebindingLock = 3;
+		// 		_memoOfLastPoint = UILinkPointNavigator.CurrentPoint;
+		// 		SoundEngine.PlaySound(12);
+		// 		if (CurrentProfile.InputModes[InputMode.KeyboardUI].KeyStatus[ListeningTrigger].Contains(newKey)) {
+		// 			CurrentProfile.InputModes[InputMode.KeyboardUI].KeyStatus[ListeningTrigger].Remove(newKey);
+		// 		}
+		// 		else {
+		// 			CurrentProfile.InputModes[InputMode.KeyboardUI].KeyStatus[ListeningTrigger] = new List<string> {
+		// 				newKey
+		// 			};
+		// 		}
+		//
+		// 		ListenFor(null, InputMode.KeyboardUI);
+		// 		Main.blockKey = newKey;
+		// 		Main.blockInput = false;
+		// 		Main.ChromaPainter.CollectBoundKeys();
+		// 	}
+		//
+		// 	FixDerpedRebinds();
+		// 	if (PlayerInput.OnBindingChange != null)
+		// 		PlayerInput.OnBindingChange();
+		//
+		// 	return NavigatorRebindingLock > 0;
+		// }
 
 		private static void PostInput() {
-			Main.GamepadCursorAlpha = MathHelper.Clamp(Main.GamepadCursorAlpha + ((Main.SmartCursorEnabled && !UILinkPointNavigator.Available && GamepadThumbstickLeft == Vector2.Zero && GamepadThumbstickRight == Vector2.Zero) ? (-0.05f) : 0.05f), 0f, 1f);
+			Main.GamepadCursorAlpha = MathHelper.Clamp(Main.GamepadCursorAlpha + (Main.SmartCursorEnabled && !UILinkPointNavigator.Available && GamepadThumbstickLeft == Vector2.Zero && GamepadThumbstickRight == Vector2.Zero ? -0.05f : 0.05f), 0f, 1f);
 			if (CurrentProfile.HotbarAllowsRadial) {
 				int num = Triggers.Current.HotbarPlus.ToInt() - Triggers.Current.HotbarMinus.ToInt();
 				if (MiscSettingsTEMP.HotbarRadialShouldBeUsed) {
@@ -1175,7 +_,7 @@
 					if (DpadSnapCooldown[i] == 0) {
 						int num = 6;
 						if (ItemSlot.IsABuildingItem(player.inventory[player.selectedItem]))
-							num = player.inventory[player.selectedItem].useTime;
+							num = PlayerHooks.TotalUseTime(player.inventory[player.selectedItem].useTime, player, player.inventory[player.selectedItem]);
 
 						DpadSnapCooldown[i] = num;
 						zero += vector;
@@ -1192,7 +_,7 @@
 				Matrix matrix = Matrix.Invert(zoomMatrix);
 				Vector2 mouseScreen = Main.MouseScreen;
 				Vector2.Transform(Main.screenPosition, matrix);
-				Vector2 vector2 = Vector2.Transform((Vector2.Transform(mouseScreen, matrix) + zero * new Vector2(16f) + Main.screenPosition).ToTileCoordinates().ToWorldCoordinates() - Main.screenPosition, zoomMatrix);
+				Vector2 vector2 = Vector2.Transform((Vector2.Transform(mouseScreen, matrix) + (zero * new Vector2(16f)) + Main.screenPosition).ToTileCoordinates().ToWorldCoordinates() - Main.screenPosition, zoomMatrix);
 				MouseX = (int)vector2.X;
 				MouseY = (int)vector2.Y;
 			}
@@ -1234,7 +_,7 @@
 				}
 				else {
 					Item item = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem];
-					text = ((item.damage > 0 && item.ammo == 0) ? (text + BuildCommand(Lang.misc[60].Value, false, keyConfiguration.KeyStatus["MouseLeft"])) : ((item.createTile < 0 && item.createWall <= 0) ? (text + BuildCommand(Lang.misc[63].Value, false, keyConfiguration.KeyStatus["MouseLeft"])) : (text + BuildCommand(Lang.misc[61].Value, false, keyConfiguration.KeyStatus["MouseLeft"]))));
+					text = item.damage > 0 && item.ammo == 0 ? text + BuildCommand(Lang.misc[60].Value, false, keyConfiguration.KeyStatus["MouseLeft"]) : item.createTile < 0 && item.createWall <= 0 ? text + BuildCommand(Lang.misc[63].Value, false, keyConfiguration.KeyStatus["MouseLeft"]) : text + BuildCommand(Lang.misc[61].Value, false, keyConfiguration.KeyStatus["MouseLeft"]);
 					bool flag = true;
 					bool flag2 = Main.SmartInteractProj != -1 || Main.HasInteractibleObjectThatIsNotATile;
 					bool flag3 = !Main.SmartInteractShowingGenuine && Main.SmartInteractShowingFake;
@@ -1256,7 +_,7 @@
 								flag = false;
 
 							Tile tile = Main.tile[Main.SmartInteractX, Main.SmartInteractY];
-							text = ((!TileID.Sets.TileInteractRead[tile.type]) ? (text + BuildCommand(Lang.misc[79].Value, false, keyConfiguration.KeyStatus["MouseRight"])) : (text + BuildCommand(Lang.misc[81].Value, false, keyConfiguration.KeyStatus["MouseRight"])));
+							text = !TileID.Sets.TileInteractRead[tile.type] ? text + BuildCommand(Lang.misc[79].Value, false, keyConfiguration.KeyStatus["MouseRight"]) : text + BuildCommand(Lang.misc[81].Value, false, keyConfiguration.KeyStatus["MouseRight"]);
 						}
 					}
 					else if (WiresUI.Settings.DrawToolModeUI) {
@@ -1299,15 +_,11 @@
 
 			if (!(triggerName == "SmartSelect")) {
 				if (triggerName == "SmartCursor" && inputMode == InputMode.Keyboard) {
-					return GenerateRawInputList(new List<string> {
-						Keys.LeftAlt.ToString()
-					});
+					return GenerateRawInputList(new List<string> { Keys.LeftAlt.ToString() });
 				}
 			}
 			else if (inputMode == InputMode.Keyboard) {
-				return GenerateRawInputList(new List<string> {
-					Keys.LeftControl.ToString()
-				});
+				return GenerateRawInputList(new List<string> { Keys.LeftControl.ToString() });
 			}
 
 			return GenerateInputTag_ForCurrentGamemode(tagForGameplay, triggerName);
@@ -1379,9 +_,7 @@
 		}
 
 		public static void PrettyPrintProfiles(ref string text) {
-			string[] array = text.Split(new string[1] {
-				"\r\n"
-			}, StringSplitOptions.None);
+			string[] array = text.Split(new string[1] { "\r\n" }, StringSplitOptions.None);
 
 			foreach (string text2 in array) {
 				if (text2.Contains(": {")) {
@@ -1417,6 +_,9 @@
 						case InputMode.Keyboard:
 							c.KeyStatus["MouseLeft"].Add("Mouse1");
 							c.KeyStatus["MouseRight"].Add("Mouse2");
+							c.KeyStatus["MouseMiddle"].Add("Mouse3");
+							c.KeyStatus["MouseXButton1"].Add("Mouse4");
+							c.KeyStatus["MouseXButton2"].Add("Mouse5");
 							c.KeyStatus["Up"].Add("W");
 							c.KeyStatus["Down"].Add("S");
 							c.KeyStatus["Left"].Add("A");
@@ -1454,6 +_,9 @@
 							c.KeyStatus["MouseLeft"].Add("Mouse1");
 							c.KeyStatus["MouseLeft"].Add("Space");
 							c.KeyStatus["MouseRight"].Add("Mouse2");
+							c.KeyStatus["MouseMiddle"].Add("Mouse3");
+							c.KeyStatus["MouseXButton1"].Add("Mouse4");
+							c.KeyStatus["MouseXButton2"].Add("Mouse5");
 							c.KeyStatus["Up"].Add("W");
 							c.KeyStatus["Up"].Add("Up");
 							c.KeyStatus["Down"].Add("S");
@@ -1517,6 +_,7 @@
 							c.KeyStatus["MenuRight"].Add(string.Concat(Buttons.DPadRight));
 							break;
 					}
+
 					break;
 				case PresetProfiles.Yoraiz0r:
 					switch (mode) {
@@ -1525,6 +_,9 @@
 						case InputMode.Keyboard:
 							c.KeyStatus["MouseLeft"].Add("Mouse1");
 							c.KeyStatus["MouseRight"].Add("Mouse2");
+							c.KeyStatus["MouseMiddle"].Add("Mouse3");
+							c.KeyStatus["MouseXButton1"].Add("Mouse4");
+							c.KeyStatus["MouseXButton2"].Add("Mouse5");
 							c.KeyStatus["Up"].Add("W");
 							c.KeyStatus["Down"].Add("S");
 							c.KeyStatus["Left"].Add("A");
@@ -1562,6 +_,9 @@
 							c.KeyStatus["MouseLeft"].Add("Mouse1");
 							c.KeyStatus["MouseLeft"].Add("Space");
 							c.KeyStatus["MouseRight"].Add("Mouse2");
+							c.KeyStatus["MouseMiddle"].Add("Mouse3");
+							c.KeyStatus["MouseXButton1"].Add("Mouse4");
+							c.KeyStatus["MouseXButton2"].Add("Mouse5");
 							c.KeyStatus["Up"].Add("W");
 							c.KeyStatus["Up"].Add("Up");
 							c.KeyStatus["Down"].Add("S");
@@ -1624,6 +_,7 @@
 							c.KeyStatus["MenuRight"].Add(string.Concat(Buttons.DPadRight));
 							break;
 					}
+
 					break;
 				case PresetProfiles.ConsolePS:
 					switch (mode) {
@@ -1632,6 +_,9 @@
 						case InputMode.Keyboard:
 							c.KeyStatus["MouseLeft"].Add("Mouse1");
 							c.KeyStatus["MouseRight"].Add("Mouse2");
+							c.KeyStatus["MouseMiddle"].Add("Mouse3");
+							c.KeyStatus["MouseXButton1"].Add("Mouse4");
+							c.KeyStatus["MouseXButton2"].Add("Mouse5");
 							c.KeyStatus["Up"].Add("W");
 							c.KeyStatus["Down"].Add("S");
 							c.KeyStatus["Left"].Add("A");
@@ -1669,6 +_,9 @@
 							c.KeyStatus["MouseLeft"].Add("Mouse1");
 							c.KeyStatus["MouseLeft"].Add("Space");
 							c.KeyStatus["MouseRight"].Add("Mouse2");
+							c.KeyStatus["MouseMiddle"].Add("Mouse3");
+							c.KeyStatus["MouseXButton1"].Add("Mouse4");
+							c.KeyStatus["MouseXButton2"].Add("Mouse5");
 							c.KeyStatus["Up"].Add("W");
 							c.KeyStatus["Up"].Add("Up");
 							c.KeyStatus["Down"].Add("S");
@@ -1731,6 +_,7 @@
 							c.KeyStatus["MenuRight"].Add(string.Concat(Buttons.DPadRight));
 							break;
 					}
+
 					break;
 				case PresetProfiles.ConsoleXBox:
 					switch (mode) {
@@ -1739,6 +_,9 @@
 						case InputMode.Keyboard:
 							c.KeyStatus["MouseLeft"].Add("Mouse1");
 							c.KeyStatus["MouseRight"].Add("Mouse2");
+							c.KeyStatus["MouseMiddle"].Add("Mouse3");
+							c.KeyStatus["MouseXButton1"].Add("Mouse4");
+							c.KeyStatus["MouseXButton2"].Add("Mouse5");
 							c.KeyStatus["Up"].Add("W");
 							c.KeyStatus["Down"].Add("S");
 							c.KeyStatus["Left"].Add("A");
@@ -1776,6 +_,9 @@
 							c.KeyStatus["MouseLeft"].Add("Mouse1");
 							c.KeyStatus["MouseLeft"].Add("Space");
 							c.KeyStatus["MouseRight"].Add("Mouse2");
+							c.KeyStatus["MouseMiddle"].Add("Mouse3");
+							c.KeyStatus["MouseXButton1"].Add("Mouse4");
+							c.KeyStatus["MouseXButton2"].Add("Mouse5");
 							c.KeyStatus["Up"].Add("W");
 							c.KeyStatus["Up"].Add("Up");
 							c.KeyStatus["Down"].Add("S");
@@ -1838,6 +_,7 @@
 							c.KeyStatus["MenuRight"].Add(string.Concat(Buttons.DPadRight));
 							break;
 					}
+
 					break;
 			}
 		}
@@ -1862,7 +_,7 @@
 		}
 
 		public static void SetZoom_Test() {
-			Vector2 vector = Main.screenPosition + new Vector2(Main.screenWidth, Main.screenHeight) / 2f;
+			Vector2 vector = Main.screenPosition + (new Vector2(Main.screenWidth, Main.screenHeight) / 2f);
 			Vector2 value = Main.screenPosition + new Vector2(_originalMouseX, _originalMouseY);
 			Vector2 value2 = Main.screenPosition + new Vector2(_originalLastMouseX, _originalLastMouseY);
 			Vector2 value3 = Main.screenPosition + new Vector2(0f, 0f);
@@ -1873,29 +_,29 @@
 			_ = value4 - vector;
 			float scaleFactor = 1f / Main.GameViewMatrix.Zoom.X;
 			float num = 1f;
-			Vector2 vector2 = vector - Main.screenPosition + value5 * scaleFactor;
+			Vector2 vector2 = (vector - Main.screenPosition) + (value5 * scaleFactor);
-			Vector2 vector3 = vector - Main.screenPosition + value6 * scaleFactor;
+			Vector2 vector3 = (vector - Main.screenPosition) + (value6 * scaleFactor);
-			Vector2 screenPosition = vector + value7 * num;
+			Vector2 screenPosition = vector + (value7 * num);
 			Main.mouseX = (int)vector2.X;
 			Main.mouseY = (int)vector2.Y;
 			Main.lastMouseX = (int)vector3.X;
 			Main.lastMouseY = (int)vector3.Y;
 			Main.screenPosition = screenPosition;
-			Main.screenWidth = (int)((float)_originalScreenWidth * num);
+			Main.screenWidth = (int)(_originalScreenWidth * num);
-			Main.screenHeight = (int)((float)_originalScreenHeight * num);
+			Main.screenHeight = (int)(_originalScreenHeight * num);
 		}
 
 		public static void SetZoom_MouseInWorld() {
-			Vector2 vector = Main.screenPosition + new Vector2(Main.screenWidth, Main.screenHeight) / 2f;
+			Vector2 vector = Main.screenPosition + (new Vector2(Main.screenWidth, Main.screenHeight) / 2f);
 			Vector2 value = Main.screenPosition + new Vector2(_originalMouseX, _originalMouseY);
 			Vector2 value2 = Main.screenPosition + new Vector2(_originalLastMouseX, _originalLastMouseY);
 			Vector2 value3 = value - vector;
 			Vector2 value4 = value2 - vector;
 			float scaleFactor = 1f / Main.GameViewMatrix.Zoom.X;
-			Vector2 vector2 = vector - Main.screenPosition + value3 * scaleFactor;
+			Vector2 vector2 = (vector - Main.screenPosition) + (value3 * scaleFactor);
 			Main.mouseX = (int)vector2.X;
 			Main.mouseY = (int)vector2.Y;
-			Vector2 vector3 = vector - Main.screenPosition + value4 * scaleFactor;
+			Vector2 vector3 = (vector - Main.screenPosition) + (value4 * scaleFactor);
 			Main.lastMouseX = (int)vector3.X;
 			Main.lastMouseY = (int)vector3.Y;
 		}
@@ -1927,12 +_,12 @@
 		}
 
 		private static void SetZoom_Scaled(float scale) {
-			Main.lastMouseX = (int)((float)_originalLastMouseX * scale);
+			Main.lastMouseX = (int)(_originalLastMouseX * scale);
-			Main.lastMouseY = (int)((float)_originalLastMouseY * scale);
+			Main.lastMouseY = (int)(_originalLastMouseY * scale);
-			Main.mouseX = (int)((float)_originalMouseX * scale);
+			Main.mouseX = (int)(_originalMouseX * scale);
-			Main.mouseY = (int)((float)_originalMouseY * scale);
+			Main.mouseY = (int)(_originalMouseY * scale);
-			Main.screenWidth = (int)((float)_originalScreenWidth * scale);
+			Main.screenWidth = (int)(_originalScreenWidth * scale);
-			Main.screenHeight = (int)((float)_originalScreenHeight * scale);
+			Main.screenHeight = (int)(_originalScreenHeight * scale);
 		}
 	}
 }
