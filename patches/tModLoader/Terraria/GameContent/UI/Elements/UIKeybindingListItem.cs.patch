--- src/Terraria/Terraria/GameContent/UI/Elements/UIKeybindingListItem.cs
+++ src/tModLoader/Terraria/GameContent/UI/Elements/UIKeybindingListItem.cs
@@ -1,9 +_,12 @@
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics;
 using System.Collections.Generic;
+using Terraria.Audio;
 using Terraria.GameContent.UI.Chat;
 using Terraria.GameInput;
+using Terraria.ID;
 using Terraria.Localization;
+using Terraria.ModLoader.Input;
 using Terraria.UI;
 using Terraria.UI.Chat;
 
@@ -11,9 +_,66 @@
 {
 	public class UIKeybindingListItem : UIElement
 	{
+		private class KeybindingLayer : Layer
+		{
+			private List<string> KeyStatus
+			{
+				get => PlayerInput.CurrentProfile.InputModes[item._inputmode].KeyStatus[item._keybind];
+				set => PlayerInput.CurrentProfile.InputModes[item._inputmode].KeyStatus[item._keybind] = value;
+			}
+
+			private UIKeybindingListItem item;
+
+			public KeybindingLayer(UIKeybindingListItem item)
+			{
+				this.item = item;
+			}
+			
+			public override void OnKeyPressed(KeyboardEventArgs args)
+			{
+				args.Handled = true;
+			
+				string newKey = args.Key.ToString();
+			
+				SoundEngine.PlaySound(SoundID.MenuTick);
+				if (KeyStatus.Contains(newKey)) {
+					KeyStatus.Remove(newKey);
+				}
+				else {
+					KeyStatus = new List<string> {
+						newKey
+					};
+				}
+				
+				Input.Layers.PopOverlay(this);
+				item._rebindingLayer = null;
+			}
+
+			public override void OnMouseDown(MouseButtonEventArgs args)
+			{
+				args.Handled = true;
+			
+				string newKey = TerrariaLayer.NamedMouseToNumber(args.Button);
+			
+				SoundEngine.PlaySound(SoundID.MenuTick);
+				if (KeyStatus.Contains(newKey)) {
+					KeyStatus.Remove(newKey);
+				}
+				else {
+					KeyStatus = new List<string> {
+						newKey
+					};
+				}
+				
+				Input.Layers.PopOverlay(this);
+				item._rebindingLayer = null;
+			}
+		}
+
 		private InputMode _inputmode;
 		private Color _color;
 		private string _keybind;
+		private KeybindingLayer _rebindingLayer;
 
 		public UIKeybindingListItem(string bind, InputMode mode, Color color) {
 			_keybind = bind;
@@ -23,11 +_,10 @@
 		}
 
 		public void OnClickMethod(UIMouseEvent evt, UIElement listeningElement) {
-			if (PlayerInput.ListeningTrigger != _keybind) {
-				if (PlayerInput.CurrentProfile.AllowEditting)
-					PlayerInput.ListenFor(_keybind, _inputmode);
-				else
-					PlayerInput.ListenFor(null, _inputmode);
+			if (_rebindingLayer == null)
+			{
+				_rebindingLayer = new KeybindingLayer(this);
+				Input.Layers.PushOverlay(_rebindingLayer);
 			}
 		}
 
@@ -37,7 +_,7 @@
 			CalculatedStyle dimensions = GetDimensions();
 			float num2 = dimensions.Width + 1f;
 			Vector2 vector = new Vector2(dimensions.X, dimensions.Y);
-			bool flag = PlayerInput.ListeningTrigger == _keybind;
+			bool flag = _rebindingLayer != null;
 			Vector2 baseScale = new Vector2(0.8f);
 			Color value = flag ? Color.Gold : (base.IsMouseHovering ? Color.White : Color.Silver);
 			value = Color.Lerp(value, Color.White, base.IsMouseHovering ? 0.5f : 0f);
@@ -104,6 +_,12 @@
 					return Lang.menu[162].Value;
 				case "MouseRight":
 					return Lang.menu[163].Value;
+				case "MouseMiddle":
+					return Language.GetTextValue("tModLoader.MouseMiddle");
+				case "MouseXButton1":
+					return Language.GetTextValue("tModLoader.MouseXButton1");
+				case "MouseXButton2":
+					return Language.GetTextValue("tModLoader.MouseXButton2");
 				case "Up":
 					return Lang.menu[148].Value;
 				case "Down":
